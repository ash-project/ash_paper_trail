<!--
This file was generated by Spark. Do not edit it by hand.
-->
# DSL: AshPaperTrail.Resource

Documentation for `AshPaperTrail.Resource`.


## paper_trail
A section for configuring how versioning is derived for the resource.


### Nested DSLs
 * [belongs_to_actor](#paper_trail-belongs_to_actor)





### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="paper_trail-attributes_as_attributes" href="#paper_trail-attributes_as_attributes">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        attributes_as_attributes
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">list(atom)</code>
  </td>
  <td style="text-align: left">
    <code class="inline">[]</code>
  </td>
  <td style="text-align: left" colspan=2>
    A set of attributes that should be set as attributes on the version resource, instead of stored in the freeform `changes` map attribute.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-change_tracking_mode" href="#paper_trail-change_tracking_mode">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        change_tracking_mode
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">:snapshot | :changes_only</code>
  </td>
  <td style="text-align: left">
    <code class="inline">:snapshot</code>
  </td>
  <td style="text-align: left" colspan=2>
    The mode to use for change tracking. Valid options are `:snapshot` and `:changes_only`.
`:snapshot` will store the entire resource in the `changes` attribute, while `:changes_only`
will only store the attributes that have changed.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-ignore_attributes" href="#paper_trail-ignore_attributes">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        ignore_attributes
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">list(atom)</code>
  </td>
  <td style="text-align: left">
    <code class="inline">[]</code>
  </td>
  <td style="text-align: left" colspan=2>
    A list of attributes that should be ignored. Typically you'll want to ignore your timestamps. The primary key is always ignored.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-mixin" href="#paper_trail-mixin">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        mixin
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    A module that defines a `using` macro that will be mixed into the version resource.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-on_actions" href="#paper_trail-on_actions">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        on_actions
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">list(atom)</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    Which actions should produce new versions. By default, all create/update actions will produce new versions.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-reference_source?" href="#paper_trail-reference_source?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        reference_source?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean</code>
  </td>
  <td style="text-align: left">
    <code class="inline">true</code>
  </td>
  <td style="text-align: left" colspan=2>
    Whether or not to create a foreign key reference from the version to the source.
This should be set to `false` if you are allowing actual deletion of data. Pair
this extension with `AshArchival` to get soft destroys and referential integrity.

Only relevant for resources using the AshPostgres data layer.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-store_action_name?" href="#paper_trail-store_action_name?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        store_action_name?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean</code>
  </td>
  <td style="text-align: left">
    <code class="inline">false</code>
  </td>
  <td style="text-align: left" colspan=2>
    Whether or not to add the `version_action_name` attribute to the  version resource. This is
useful for auditing purposes. The `version_action_type` attribute is always stored.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="paper_trail-version_extensions" href="#paper_trail-version_extensions">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        version_extensions
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">Keyword.t</code>
  </td>
  <td style="text-align: left">
    <code class="inline">[]</code>
  </td>
  <td style="text-align: left" colspan=2>
    Extensions that should be used by the version resource. For example: `extensions: [AshGraphql.Resource], notifier: [Ash.Notifiers.PubSub]`

  </td>
</tr>

  </tbody>
</table>



## paper_trail.belongs_to_actor
```elixir
belongs_to_actor name, destination
```


Creates a belongs_to relationship for the actor resource. When creating a new version, if the actor on the action is set and 
matches the resource type, the version will be related to the actor. If your actors are polymorphic or varying types, declare a 
belongs_to_actor for each type.

A reference is also created with `on_delete: :nilify` and `on_update: :update`

If you need more complex relationships, set `define_attribute? false` and add the relationship via a mixin.

If your actor is not a resource, add a mixin and with a change for all creates that sets the actor's to one your attributes. 
The actor on the version changeset is set.




### Examples
```
belongs_to_actor :user, MyApp.Users.User, api: MyApp.Users
```




### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="name-destination-name" href="#name-destination-name">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        name
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The name of the relationship to use for the actor (e.g. :user)
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-destination-allow_nil?" href="#name-destination-allow_nil?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        allow_nil?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean</code>
  </td>
  <td style="text-align: left">
    <code class="inline">true</code>
  </td>
  <td style="text-align: left" colspan=2>
    Whether this relationship must always be present, e.g: must be included on creation, and never removed (it may be modified). The generated attribute will not allow nil values.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-destination-api" href="#name-destination-api">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        api
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The API module to use when working with the related entity.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-destination-attribute_type" href="#name-destination-attribute_type">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        attribute_type
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">`any`</code>
  </td>
  <td style="text-align: left">
    <code class="inline">:uuid</code>
  </td>
  <td style="text-align: left" colspan=2>
    The type of the generated created attribute. See `Ash.Type` for more.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-destination-define_attribute?" href="#name-destination-define_attribute?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        define_attribute?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean</code>
  </td>
  <td style="text-align: left">
    <code class="inline">true</code>
  </td>
  <td style="text-align: left" colspan=2>
    If set to `false` an attribute is not created on the resource for this relationship, and one must be manually added in `attributes`, invalidating many other options.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-destination-destination" href="#name-destination-destination">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        destination
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">module</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The resource of the actor (e.g. MyApp.Users.User)
  </td>
</tr>

  </tbody>
</table>





### Introspection

Target: `AshPaperTrail.Resource.BelongsToActor`




